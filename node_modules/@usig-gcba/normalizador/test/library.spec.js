/* global describe, it, before */

import chai from 'chai';
import {Normalizador, NormalizadorAMBA, Direccion} from '../lib/normalizador.js';
import {EXCEPCION_ALTURA_INVALIDA, EXCEPCION_CALLE_INVALIDA, EXCEPCION_CALLE_SIN_ALTURAS, DIRECCION_CALLE_Y_CALLE} from '../src/constants'
import callejero from '../callejero.json'
chai.expect();

const expect = chai.expect;
const assert = chai.assert;

let lib;
let libAux;
let libAMBA = NormalizadorAMBA.init();

describe('Dado un normalizador', () => {
  before((done) => {
    lib = Normalizador.init({callesEnMinusculas: false}).then ((normalizador) => {
        lib = normalizador;
      done();
      }, (err) => done (err)
    );
    libAux = Normalizador.init().then ((normalizador) => {
        libAux = normalizador;
      }, (err) => {}
    );
  });
  describe ('Cuando lo inicializo por segunda vez', () => {
    it ('deberia devolverme la instancia creada previamente', () => {
      assert(libAux === lib);
    })
  });
  describe('Cuando busco una calle con altura', () => {
    it('El callejero debe estar listo', () => {
      expect(lib.listo()).to.be.true;
    });
    it('deberia estar inicializado el normalizador', () => {
      expect(lib.inicializado()).to.be.true;
    });
    it('deberia lanzar excepecion al buscar calle inexistente', () => {
      try {
        lib.normalizar("asdfp 1234");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.toString()).to.be.equal("Calle inexistente: asdfp 1234")
      }
    });
    it('deberia lanzar excepecion al buscar calle inexistente 2', () => {
      try {
        lib.normalizar("av asdfp 1234");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.toString()).to.be.equal("Calle inexistente: av asdfp 1234")
      }
    });
    describe ('Para una busqueda que arroja un resultado', () => {
      let direcciones = [];
      let direccion = {};
      before(() => {
        direcciones = lib.normalizar("corrientes 1234");
        direccion = direcciones[0];
      });
      it('deberia devolver un resultado', () => {
        console.log (direcciones[0])
        expect(direcciones.length).to.be.equal(1);
      });
      it('deberia devolver el codigo apropiado', () => {
        expect(direccion.calle.codigo).to.be.equal(3174);
      });
      it('La calle deberia ser igual a si misma', () => {
        expect(Direccion.isEqual(direccion, direccion)).to.be.equal(true);
      });
    });
    describe ('Para una busqueda que arroja un resultado 2', () => {
      let direcciones = [];
      let direccion = {};
      before(() => {
        direcciones = lib.normalizar("Pasteur 234");
        direccion = direcciones[0];
      });
      it('deberia devolver un resultado', () => {
        expect(direcciones.length).to.be.equal(1);
      });
      it('deberia devolver el codigo apropiado', () => {
        expect(direccion.calle.nombre.toUpperCase()).to.be.equal("PASTEUR");
      });
    });
    it('deberia lanzar excepecion al buscar una calle existente con altura invalida', () => {
      try {
        lib.normalizar("corrientes 12340");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.toString()).to.be.equal("La calle CORRIENTES no existe a la altura 12340")
        expect(error.getError().type).to.be.equal("ALTURA_INVALIDA")
      }
    });
    it('deberia lanzar excepecion al buscar muchas calles existentes con altura invalida', () => {
      try {
        lib.normalizar("sarm 35000");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.toString()).to.be.equal("La calle SARM no existe a la altura 35000")
      }
    });
    it('deberia devolver un resultado al buscar muchas calles existentes y una con altura valida', () => {
      expect(lib.normalizar("sarm 2560").length).to.be.equal(1);
    });
    it('deberia devolver dos resultados al buscar muchas calles existentes y dos con alturas validas', () => {
      expect(lib.normalizar("sarm 900").length).to.be.equal(2);
      expect (Direccion.isEqual(lib.normalizar("sarm 900")[0], lib.normalizar("sarm 900")[1])).to.be.equal(false);
    });
    it('deberia lanzar una expecion al buscar una calle con varios tramos y altura invalida', () => {
      try {
        lib.normalizar("Zapiola 5700");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.toString()).to.be.equal("La calle ZAPIOLA no existe a la altura 5700")

      }
    });
    it('deberia devolver un resultado al buscar una calle con varios tramos y una altura valida', () => {
      let direcciones = lib.normalizar("Cordoba 6400");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(3165);
      assert(calle.nombre.toUpperCase() === "CORDOBA");
      assert(direcciones[0].altura === 6400);
    });
    it('deberia devolver un resultado al buscar una calle con nombre compuesto y una altura valida', () => {
      let direcciones = lib.normalizar("Julian Alvarez 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1057);
      assert(calle.nombre.toUpperCase() === "ALVAREZ, JULIAN");
      assert(direcciones[0].altura === 1440);
    });
    it('deberia devolver un resultado al buscar una calle con nombre compuesto y una altura valida 2', () => {
      let direcciones = lib.normalizar("Alvarez, Julian 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1057);
      expect(calle.nombre.toUpperCase()).to.be.equal("ALVAREZ, JULIAN");
      expect(direcciones[0].altura).to.be.equal(1440);
    });
    it('deberia devolver un resultado al buscar una calle con nombre compuesto y una altura valida 3', () => {
      let direcciones = lib.normalizar("Alvarez,Julian 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1057);
      expect(calle.nombre.toUpperCase()).to.be.equal("ALVAREZ, JULIAN");
      expect(direcciones[0].altura).to.be.equal(1440);
    });
    it('deberia devolver un resultado al buscar una calle con nombre compuesto y una altura valida 4', () => {
      let direcciones = lib.normalizar("Alvare Julia 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1057);
      expect(calle.nombre.toUpperCase()).to.be.equal("ALVAREZ, JULIAN");
      expect(direcciones[0].altura).to.be.equal(1440);
    });
    it('deberia devolver un resultado al buscar una calle con nombre compuesto y una altura valida 5', () => {
      let direcciones = lib.normalizar("Julián Alvarez 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1057);
      expect(calle.nombre.toUpperCase()).to.be.equal("ALVAREZ, JULIAN");
      expect(direcciones[0].altura).to.be.equal(1440);
    });
    it('deberia devolver un resultado al buscar una calle con nombre compuesto y una altura valida 6', () => {
      let direcciones = lib.normalizar("JULIÁN Álvarez 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1057);
      expect(calle.nombre.toUpperCase()).to.be.equal("ALVAREZ, JULIAN");
      expect(direcciones[0].altura).to.be.equal(1440);
    });
    it('deberia devolver un resultado al buscar una calle con punto y una altura valida', () => {
      let direcciones = lib.normalizar("Av. Cordoba 1440");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(3165);
      expect(calle.nombre.toUpperCase()).to.be.equal("CORDOBA AV.");
      expect(direcciones[0].altura).to.be.equal(1440);
    });
    it('deberia devolver un resultado al buscar una calle con enie y una altura valida', () => {
      let direcciones = lib.normalizar("Ñandú 3144");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(5041);
      expect(calle.nombre.toUpperCase()).to.be.equal("EL ÑANDU");
      expect(direcciones[0].altura).to.be.equal(3144);
    });
    it('deberia devolver un resultado al buscar una calle con enie y una altura valida 2', () => {
      let direcciones = lib.normalizar("el.ñandú 3144");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(5041);
      expect(calle.nombre.toUpperCase()).to.be.equal("EL ÑANDU");
      expect(direcciones[0].altura).to.be.equal(3144);
    });
    it('deberia devolver un resultado al buscar una calle con dieresis y una altura valida', () => {
      let direcciones = lib.normalizar("agüero 2144");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1022);
      expect(calle.nombre.toUpperCase()).to.be.equal("AGUERO");
      expect(direcciones[0].altura).to.be.equal(2144);
    });
    it('deberia devolver un resultado al buscar una calle con dieresis y una altura valida 2', () => {
      let direcciones = lib.normalizar("AGÜERO 2144");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(1022);
      expect(calle.nombre.toUpperCase()).to.be.equal("AGUERO");
      expect(direcciones[0].altura).to.be.equal(2144);
    });
    it('deberia devolver un resultado al buscar una calle con apostrofe y una altura valida', () => {
      let direcciones = lib.normalizar("o'higgins 2144");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(16009);
      expect(calle.nombre.toUpperCase()).to.be.equal("O'HIGGINS");
      expect(direcciones[0].altura).to.be.equal(2144);
    });
    it('deberia devolver un resultado al buscar una avenida y una altura valida', () => {
      let direcciones = lib.normalizar("Pueyrredon, Honorio, Dr. Av. 1800");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(17133);
      expect(direcciones[0].altura).to.be.equal(1800);
    });
    it('deberia devolver un resultado al buscar una avenida pero no en la altura indicada', () => {
      let direcciones = lib.normalizar("av. monroe 2224");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(4111);
      expect(calle.nombre.toUpperCase()).to.be.equal("MONROE");
      expect(direcciones[0].altura).to.be.equal(2224);
    });
    it('deberia devolver un resultado al buscar una avenida pero no en la altura indicada 2', () => {
      try {
        lib.normalizar("Av. Sarmiento 2550");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.toString()).to.be.equal("La calle  SARMIENTO no existe a la altura 2550")
      }
    });
    it('deberia devolver un resultado al buscar una avenida pero no en la altura indicada 3', () => {
      try {
        lib.normalizar("Av. San Martin 550");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_ALTURA_INVALIDA)
      }
    });
    it('deberia devolver un resultado al buscar una avenida pero no en la altura indicada 4', () => {
      let direcciones = lib.normalizar("OLLEROS AV. 3718");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(16022);
      expect(calle.nombre.toUpperCase()).to.be.equal("OLLEROS");
      expect(direcciones[0].altura).to.be.equal(3718);
    });
    it('deberia devolver un resultado al buscar una calle pasaje pero el nombre no dice', () => {
      let direcciones = lib.normalizar("pasaje portugal 530");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(17113);
      expect(calle.nombre.toUpperCase()).to.be.equal("PORTUGAL");
      expect(direcciones[0].altura).to.be.equal(530);
    });
    it('deberia devolver un resultado al buscar una calle pasaje pero el nombre no dice 2', () => {
      let direcciones = lib.normalizar("portugal pje 530");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(17113);
      expect(calle.nombre.toUpperCase()).to.be.equal("PORTUGAL");
      expect(direcciones[0].altura).to.be.equal(530);
    });
    it('deberia lanzar excepcion al buscar en una calle sin alturas', () => {
      try {
        lib.normalizar("aerolineas argentinas 550");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_SIN_ALTURAS)
      }
    });
    it('deberia lanzar excepcion al buscar en una calle sin alturas 2', () => {
      try {
        lib.normalizar("O'Connor, Elsa 850");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_SIN_ALTURAS)
      }
    });
    it('deberia encontrar calle con SN', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: true});
        assert(lib.normalizar("O'Connor, Elsa s/n").length === 1);
        assert(lib.normalizar("O'Connor, Elsa S/n").length === 1);
        assert(lib.normalizar("O'Connor, Elsa S\\N").length === 1);
        assert(lib.normalizar("O'Connor, Elsa s/N").length === 1);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con SN 2', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: false});

        lib.normalizar("O'Connor, Elsa s/n");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");

      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_INVALIDA);
      }
    });
    it('deberia encontrar calle con SN 3', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: true});
        lib.normalizar("callao s/n");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");

      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_ALTURA_INVALIDA);
      }
    });
    it('deberia encontrar calle con y sin altura', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: true});
        assert(lib.normalizar("serrano s/n").length === 1);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "Tiro la excepcion");
      }
    });
    it('deberia encontrar calle con y sin altura 2', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: true});
        assert(lib.normalizar("serrano 300").length === 1);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", error.message);
      }
    });
    it('deberia encontrar calle con y sin altura 3', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: false});
        lib.normalizar("serrano s/n");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");

      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_INVALIDA);
      }
    });
    it('deberia encontrar calle con y sin altura 4', () => {
      try {
        lib.setOptions({aceptarCallesSinAlturas: false});
        assert(lib.normalizar("serrano 300").length === 1);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", error.message);
      }
    });
    it('deberia encontrar calle con separadores Y/E', () => {
      try {
        let direcciones = lib.normalizar("URIBURU JOSE E., Pres. 1003");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(22012);
        expect(calle.nombre.toUpperCase()).to.be.equal("URIBURU JOSE E., PRES.");
        expect(direcciones[0].altura).to.be.equal(1003);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con separadores Y/E 2', () => {
      try {
        let direcciones = lib.normalizar("BATLLE Y ORDOÑEZ, JOSE P.T. 5105");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(20117);
        expect(calle.nombre.toUpperCase()).to.be.equal("BATLLE Y ORDOÑEZ, JOSE P.T.");
        expect(direcciones[0].altura).to.be.equal(5105);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", error.message);
      }
    });
    it('deberia encontrar calle con separadores Y/E 3', () => {
      try {
        let direcciones = lib.normalizar("BENEDETTI, OSVALDO E., Dip.Nac. 14");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(12031);
        expect(calle.nombre.toUpperCase()).to.be.equal("BENEDETTI, OSVALDO E., DIP.NAC.");
        expect(direcciones[0].altura).to.be.equal(14);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con separadores Y/E 4', () => {
      try {
        let direcciones = lib.normalizar("Butty, Enrique, Ing. 240");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(17147);
        expect(direcciones[0].altura).to.be.equal(240);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con mas de 30 caracteres', () => {
      try {
        let direcciones = lib.normalizar("PAZ Y FIGUEROA, MARIA ANTONIA de la 4541");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(17046);
        expect(calle.nombre.toUpperCase()).to.be.equal("PAZ Y FIGUEROA, MARIA ANTONIA DE LA");
        expect(direcciones[0].altura).to.be.equal(4541);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle que matchea con calle con y sin alturas', () => {
      try {
        let direcciones = lib.normalizar("Italia 450");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(9026);
        expect(calle.nombre.toUpperCase()).to.be.equal("ITALIA");
        expect(direcciones[0].altura).to.be.equal(450);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con E', () => {
      try {
        let direcciones = lib.normalizar("VIDELA, NICOLAS E. 430");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(23052);
        expect(calle.nombre.toUpperCase()).to.be.equal("VIDELA, NICOLAS E.");
        expect(direcciones[0].altura).to.be.equal(430);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", error.message);
      }
    });
    it('deberia encontrar calle con E 2', () => {
      try {
        let direcciones = lib.normalizar("RODO, JOSE E. 5400");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(19064);
        expect(calle.nombre.toUpperCase()).to.be.equal("RODO, JOSE E.");
        expect(direcciones[0].altura).to.be.equal(5400);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con comienzo de palabra', () => {
      try {
        let direcciones = lib.normalizar("Dob 105");
        let calle = direcciones[0].calle;
        expect(direcciones.length).to.be.equal(1);
        expect(calle.codigo).to.be.equal(4079);
        expect(calle.nombre.toUpperCase()).to.be.equal("DOBLAS");
        expect(direcciones[0].altura).to.be.equal(105);

      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
    it('deberia encontrar calle con auto desambiguar activado', () => {
      try {
        let direcciones = lib.normalizar("sarmiento 1500", 10, true);
        expect(direcciones.length).to.be.equal(1);
      } catch (error) {
        assert.fail("Una calle", "Excepcion", "No encontro la direccion");
      }
    });
  });
  describe('Cuando busco una calle y calle', () => {
    it('El callejero debe estar listo', () => {
      expect(lib.listo()).to.be.true;
    });
    it('deberia estar inicializado el normalizador', () => {
      expect(lib.inicializado()).to.be.true;
    });
    it('deberia lanzar excepecion al buscar calle inexistente', () => {
      try {
        lib.normalizar("asdfp y Corrientes");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_INVALIDA)
      }
    });
    it('deberia lanzar excepecion al buscar calle inexistente 2', () => {
      try {
        lib.normalizar("Corrientes y asdp");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_INVALIDA)
      }
    });

    it('deberia lanzar una exepcion con dos calles unicas sin cruce', () => {
      try {
        lib.normalizar("Corrientes y Cordoba");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.getMatchingsCalle1().length).to.be.equal(1);
        expect(error.getMatchingsCalle2().length).to.be.equal(2);
      }
    });
    it('deberia lanzar una exepcion con dos calles multiples sin cruce', () => {
      try {
        lib.normalizar("Serrano y Guemes");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.getMatchingsCalle1().length).to.be.equal(2);
        expect(error.getMatchingsCalle2().length).to.be.equal(2);
      }
    });


    it('deberia devolver un resultado al buscar una calle unica y una multiple con un cruce', () => {
      let direcciones = lib.normalizar("Corrientes y Pasteur");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(3174);
      expect(calle.nombre.toUpperCase()).to.be.equal("CORRIENTES AV.");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(17031);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("PASTEUR");
    });
    it('deberia lanzar una exepcion conuna calle unica y una multiple sin cruce', () => {
      try {
        lib.normalizar("Sarmiento y Cordoba Av.");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.getMatchingsCalle1().length).to.be.equal(4);
        expect(error.getMatchingsCalle2().length).to.be.equal(1);
      }
    });
    it('deberia lanzar una exepcion conuna calle unica y una multiple sin cruce 2', () => {
      try {
        lib.normalizar("Cuba y O'Higgins");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.getMatchingsCalle1().length).to.be.equal(2);
        expect(error.getMatchingsCalle2().length).to.be.equal(1);
      }
    });
    it('deberia lanzar una exepcion con dos calles multiples sin cruce 2', () => {
      try {
        lib.normalizar("Sarmiento y Peron");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.getMatchingsCalle1().length).to.be.equal(4);
        expect(error.getMatchingsCalle2().length).to.be.equal(2);
      }
    });
    it('deberia devolver un resultado al buscar dos calles unicas con cruce', () => {
      let direcciones = lib.normalizar("Sarmiento y Pasteur");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(20074);
      expect(calle.nombre.toUpperCase()).to.be.equal("SARMIENTO");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(17031);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("PASTEUR");
    });
    it('deberia devolver un resultado al buscar dos calles unicas con cruce 2', () => {
      let direcciones = lib.normalizar("pampa y combatientes");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(12168);
      expect(calle.nombre.toUpperCase()).to.be.equal("LA PAMPA");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(1055);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("COMBATIENTES DE MALVINAS AV.");
    });
    it('deberia devolver un resultado al buscar una calle unica y una multiple con un cruce 2', () => {
      let direcciones = lib.normalizar("guemes y borges");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(calle.codigo).to.be.equal(7098);
      expect(calle.nombre.toUpperCase()).to.be.equal("GUEMES");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(20090);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("BORGES, JORGE LUIS");
    });
    it('deberia devolver un resultado al buscar una calle unica y una multiple con un cruce', () => {
      let direcciones = lib.normalizar("Pasteur y Sarmiento");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(calle.codigo).to.be.equal(17031);
      expect(calle.nombre.toUpperCase()).to.be.equal("PASTEUR");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(20074);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("SARMIENTO");
    });
    it('deberia devolver un resultado al buscar una calle unica avenida y una unica con un cruce', () => {
      let direcciones = lib.normalizar("Medrano AV y Cabrera");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(direcciones[0].tipo).to.be.equal("DIRECCION");
      expect(calle.codigo).to.be.equal(13061);
      expect(calle.nombre.toUpperCase()).to.be.equal("MEDRANO");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(3009);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("CABRERA, JOSE A.");
    });
    it('deberia devolver un resultado al buscar una calle unica y una unica avenida con un cruce', () => {
      let direcciones = lib.normalizar("cabrera y medrano av");
      let calle = direcciones[0].calle;
      expect(direcciones.length).to.be.equal(1);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
      expect(calle.codigo).to.be.equal(3009);
      expect(calle.nombre.toUpperCase()).to.be.equal("CABRERA, JOSE A.");
      expect(direcciones[0].calleCruce.codigo).to.be.equal(13061);
      expect(direcciones[0].calleCruce.nombre.toUpperCase()).to.be.equal("MEDRANO");
    });
    it('deberia devolver un resultado al buscar una calle unica avenida y una unica avenida con un cruce', () => {
      let direcciones = lib.normalizar("FERNANDEZ DE LA CRUZ F GRAL AV y LARRAZABAL AV");
      expect(direcciones.length).to.be.equal(1);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
    });
    it('deberia lanzar una exepcion con dos calles unicas sin cruce', () => {
      try {
        lib.normalizar("breton y beauchef");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.getMatchingsCalle1().length).to.be.equal(1);
        expect(error.getMatchingsCalle2().length).to.be.equal(1);
      }
    });
    it('deberia lanzar una exepcion con una calle unica y una inexistente sin cruce', () => {
      try {
        lib.normalizar("Justo Alicia Moreau de y .");
        assert.fail("Una calle", "Excepcion", "No tiro la excepcion");
      } catch (error) {
        expect(error.id).to.be.equal(EXCEPCION_CALLE_INVALIDA);
      }
    });
    it('deberia devolver un resultado al buscar dos calles sin alturas y cruce unico', () => {
      let direcciones = lib.normalizar("de los italianos y villaflor");
      expect(direcciones.length).to.be.equal(1);
      expect(direcciones[0].tipoDireccion).to.be.equal(DIRECCION_CALLE_Y_CALLE);
    });
  });

});

describe('Dado un normalizador AMBA', () => {
  it ('Cuando hago una búsqueda calle altura deberia encontrar resultados', (done) => {
    libAMBA.buscar("fede 123", (res)=> { done();}, (err) => done(err), 10);
  });
  it ('Cuando hago una búsqueda calle y calle deberia encontrar resultados', (done) => {
    libAMBA.buscar("fede y fede", (res)=> {done();}, (err) => done(err), 10);
  });
});
