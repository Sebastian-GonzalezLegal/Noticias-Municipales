import Direccion from 'Direccion'
import URI from 'urijs'

/**
 * @class NormalizadorAMBA
 * Esta clase implementa una interfaz Javascript con el servicio de Normalizacion de Direcciones de USIG<br/>
 * Requiere: jQuery-1.3.2+, jquery.class, json, jquery.jsonp-1.1.0.1+, usig.core, usig.AjaxComponent<br/>
 * @namespace usig
 * @cfg {String} server Url del servicio del Normalizador de Direcciones de USIG. Por defecto: '//servicios.usig.buenosaires.gob.ar/normalizar'.
 * @cfg {Boolean} debug Mostrar informacion de debugging en la consola. Requiere soporte para window.console.log.
 * @cfg {Integer} maxSuggestions Maximo numero de sugerencias a devolver
 * @cfg {Integer} serverTimeout Tiempo maximo de espera (en ms) antes de abortar una busqueda en el servidor
 * @cfg {Integer} maxRetries Maximo numero de reintentos a realizar en caso de timeout
 * @cfg {Function} afterAbort Callback que es llamada cada vez que se aborta un pedido al servidor.
 * @cfg {Function} afterRetry Callback que es llamada cada vez que se reintenta un pedido al servidor.
 * @cfg {Function} afterServerRequest Callback que es llamada cada vez que se hace un pedido al servidor.
 * @cfg {Function} afterServerResponse Callback que es llamada cada vez que se recibe una respuesta del servidor.<br/>
 * @constructor
 * @param {Object} options (optional) Un objeto conteniendo overrides para las opciones disponibles
*/

const NormalizadorAMBA = {
  init: function(options) {
    this.opts = Object.assign({}, defaults, options);
    return NormalizadorAMBA;
  },
  /**
   * Permite tratar de normalizar en forma asincronica un texto cualquiera
   * @param {String} text Texto a buscar
   * @param {Function} success Funcion que es llamada con el resultado de la busqueda
   * @param {Function} error Funcion que es llamada en caso de error
   * @param {Integer} maxSug Maximo numero de sugerencias a devolver
   */
  buscar: function(text, success, error, maxSug) {
    const maxSuggestions = maxSug ? maxSug : this.opts.maxSuggestions;
    const options = Object.assign({}, this.opts.options);
    options.maxOptions = maxSuggestions;
    options.direccion = text;
    this.lastRequest = mkRequest(options, this.opts.server).then((results) => {
      let newResults = [];
      if (results.direccionesNormalizadas){
        const maxSug = Math.min(results.direccionesNormalizadas.length, maxSuggestions);

        for (let i=0; i<maxSug; i++){
          const res = results.direccionesNormalizadas[i];
          let sug;
          if (res.tipo === 'calle'){
            sug = {codigo: res.cod_calle, nombre: res.nombre_calle, tipo: "CALLE"};
            sug.partido = res.nombre_partido;
            sug.descripcion = res.nombre_localidad + ', ' +res.nombre_partido;
          }else{
            sug = Direccion.fromObj(res);
          }
          newResults.push(sug);
        }
      }
      if (typeof(success) === "function") {
        success(newResults);
      }
    }).catch((err) => error(err));
  },
}

function mkRequest(data, address, serverDefaults){
  const url = URI(address).search(data);
  return fetch(url.toString(), serverDefaults)
    .then((resp) => resp.json())
    .catch((err) => {console.log (err); return err;})
}
const defaults = {
	debug: false,
	options: {
		'exclude': 'caba'
	},
	server: 'https://servicios.usig.buenosaires.gob.ar/normalizar',
	maxSuggestions: 10,
	serverTimeout: 5000,
	maxRetries: 3,
};

export default NormalizadorAMBA;
