import {EXCEPCION_ALTURA_INVALIDA, EXCEPCION_CALLE_INVALIDA, EXCEPCION_CALLE_SIN_ALTURAS, EXCEPCION_CARGA_CALLEJERO, EXCEPCION_CRUCE_INEXISTENTE} from 'constants.js'
/**
 * @class ErrorCalleInexistente
 * @namespace usig
 * @constructor
 * @param {String} str Nombre oficial de la calle
 */
export function ErrorCalleInexistente(str) {
  this.id = EXCEPCION_CALLE_INVALIDA;
  /**
   * Devuelve un mensaje de error con el nombre de la calle
   * @return {String} Mensaje de error
   */
  this.toString = function() {
    return "Calle inexistente: "+str;
  }

  /**
   * Devuelve el nombre de la calle
   * @return {String} Nombre de la calle
   */
  this.getNombreCalle = function() {
    return str;
  }

  /**
   * Devuelve un mensaje de error más descriptivo y amigable
   * @return {Object} Mensaje de error
   */
  this.getError = function() {
    return {
      type: "CALLE_INEXISTENTE",
      message: 'No pudo hallarse ninguna calle existente que coincidiera con su b&uacute;squeda. Por favor, revise el nombre ingresado y vuelva a intentarlo.'
    };
  }
}

/**
 * @class ErrorEnCargaDelCallejero
 * @namespace usig
 * @constructor
 */
export function ErrorEnCargaDelCallejero () {

  this.id = EXCEPCION_CARGA_CALLEJERO;
  /**
   * Devuelve un mensaje de error
   * @return {String} Mensaje de error
   */
  this.toString = function() {
    return "Callejero no disponible.";
  }

  /**
   * Devuelve un mensaje de error más descriptivo y amigable
   * @return {String} Mensaje de error
   */
  this.getError = function() {
    return {
      type: "CALLES_SIN_CARGAR",
      message: "El callejero no se encuentra cargado aún o se produjo un error al intentar cargarlo"
    };
  }
}

/**
 * @class ErrorCalleInexistenteAEsaAltura
 * @namespace usig
 * @constructor
 * @param {String} calle Nombre oficial de la calle
 * @param {Array} matchings Array de instancias de usig.Calle que matchean el string 'calle'
 * @param {Integer} altura Altura invalida de la calle
 */
export function ErrorCalleInexistenteAEsaAltura(calle, matchings, altura) {
  this.id = EXCEPCION_ALTURA_INVALIDA;
  this.message = 'La altura indicada no es válida para la calle ingresada.';

  /**
   * Devuelve el nombre de la calle
   * @return {String} Nombre de la calle
   */
  this.getCalle = function() {
    return calle;
  };

  /**
   * Devuelve el array de matchings para la calle
   * @return {Array} Instancias de usig.Calle que matchean 'calle'
   */
  this.getMatchings = function() {
    return matchings;
  };

  /**
   * Devuelve la altura invalida de la calle
   * @return {Integer} Altura
   */
  this.getAltura = function() {
    return altura;
  };

  /**
   * Devuelve un mensaje de error con el nombre de la calle y la altura invalida
   * @return {String} Mensaje de error
   */
  this.toString = function() {
    return "La calle "+calle+" no existe a la altura "+altura;
  };

  /**
   * Devuelve un mensaje de error más descriptivo y amigable
   * @return {Object} Mensaje de error
   */
  this.getError = function() {
    let errorMatchings = [];
    matchings.forEach((calle, i) => {
      let tramos = calle.alturas;
      tramos.forEach((tramo, i) => {
        errorMatchings.push({calle: calle.nombre, inicio: tramo[0], fin: tramo[1]});
      });
    });

    return {
      type: "ALTURA_INVALIDA",
      message: this.message,
      matchings: errorMatchings
    }
  }
}

/**
 * @class ErrorCalleSinAlturas
 * @namespace usig
 * @constructor
 * @param {String} str Nombre oficial de la calle
 */
export function ErrorCalleSinAlturas(str) {
  this.id = EXCEPCION_CALLE_SIN_ALTURAS;
  this.message = 'La calle {calle} no posee alturas oficiales. Utilice intersecciones para hallar direcciones válidas sobre esta calle o escriba S/N en lugar de la altura.'

  /**
   * Devuelve un mensaje de error con el nombre de la calle
   * @return {String} Mensaje de error
   */
  this.toString = function() {
    return this.message.replace('{calle}', str);
  };

  /**
   * Devuelve el nombre de la calle
   * @return {String} Nombre de la calle
   */
  this.getNombreCalle = function() {
    return str;
  };

  /**
   * Devuelve un mensaje de error más descriptivo y amigable
   * @return {Object} Mensaje de error
   */
  this.getError = function() {
    return {
      type: "CALLE_SIN_ALTURAS",
      streetName: str,
      message: this.message.replace('{calle}', str)
    };
  }
}

/**
 * @class ErrorCruceInexistente
 * @namespace usig
 * @constructor
 * @param {String} calle1 Nombre oficial de la primera calle
 * @param {Array} matchingsCalle1 Array de instancias de usig.Calle que matchean el string 'calle1'
 * @param {String} calle2 Nombre oficial de la segunda calle
 * @param {Array} matchingsCalle2 Array de instancias de usig.Calle que matchean el string 'calle2'
 */
export function ErrorCruceInexistente(calle1, matchingsCalle1, calle2, matchingsCalle2) {

  this.id = EXCEPCION_CRUCE_INEXISTENTE;
  this.message = 'El cruce de calles indicado no existe';

  /**
   * Devuelve el nombre de la primera calle
   * @return {String} Nombre de la primera calle
   */
  this.getCalle1 = function() {
    return calle1;
  };

  /**
   * Devuelve el nombre de la segunda calle
   * @return {String} Nombre de la segunda calle
   */
  this.getCalle2 = function() {
    return calle2;
  };

  /**
   * Devuelve el array de matchings para la primera calle
   * @return {Array} Instancias de usig.Calle que matchean 'calle1'
   */
  this.getMatchingsCalle1 = function() {
    return matchingsCalle1;
  };

  /**
   * Devuelve el array de matchings para la segunda calle
   * @return {Array} Instancias de usig.Calle que matchean 'calle2'
   */
  this.getMatchingsCalle2 = function() {
    return matchingsCalle2;
  };

  /**
   * Devuelve un mensaje de error con el nombre de la calles
   * @return {String} Mensaje de error
   */
  this.toString = function() {
    return "Cruce inexistente: "+calle1+" y "+calle2;
  };

  /**
   * Devuelve un mensaje de error más descriptivo y amigable
   * @return {Object} Mensaje de error
   */
  this.getError = function() {
    return {
      matchings1: matchingsCalle1,
      matchings2: matchingsCalle2,
      type: "CRUCE_INEXISTENTE",
      message: this.message
    };
  }
}
