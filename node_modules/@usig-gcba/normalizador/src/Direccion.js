import {CALLE, DIRECCION_CALLE_ALTURA, DIRECCION_CALLE_Y_CALLE, INVALIDO} from 'constants.js'


/**
 * Devuelve un string con la direccion escrita correctamente para mostrar
 * @return {String} Direccion como texto
 */
function toString(direccion) {
  let res;
  if (direccion.tipoDireccion === DIRECCION_CALLE_ALTURA || direccion.tipoDireccion === "calle_altura") {
    res = direccion.calle.nombre+' '+(direccion.altura>0?direccion.altura:'S/N');
  } else {
    var nombreCruce = direccion.calleCruce.nombre;
    var separador = nombreCruce.match(/^(I|Hi|HI).*/)?' e ':' y ';
    res = direccion.calle.nombre+separador+direccion.calleCruce.nombre;
  }
  if (direccion.calle.partido !== undefined){
    res = res+', '+direccion .calle.localidad;
  }
  return res;
}

/**
 * @class Direccion
 * @namespace usig
 * @constructor
 * @param {usig.Calle} calle1 Instancia de la clase usig.Calle
 * @param {usig.Calle-Integer} calle2OAltura Instancia de usig.Calle que se cruza con calle1 o altura correspondiente de calle1
 */
export default class Direccion {

  static construirDireccion(calle1, calle2OAltura) {
    let calle = null;
    let calleCruce = null;
    let altura = 0;
    let tipo = null;
    let smp = '';
    let coordenadas = null;
    const type = "DIRECCION";

    if (calle1.tipo === "CALLE" || calle1.tipo === "calle_altura" || calle1.tipo === "calle_y_calle") {
      calle = calle1;
    }

    if (calle2OAltura.tipo === "CALLE") {
      calleCruce = calle2OAltura;
      tipo = DIRECCION_CALLE_Y_CALLE;
    } else {
      if (!isNaN(parseInt(calle2OAltura))) {
        tipo = DIRECCION_CALLE_ALTURA;
        altura = parseInt(calle2OAltura);
      }
    }
    let direccion = {
      calle: calle,
      calleCruce: calleCruce,
      altura: altura,
      tipoDireccion: tipo,
      smp: smp,
      coordenadas: coordenadas,
      tipo: type
    };
    direccion.nombre = toString(direccion);
    return direccion;
  }

  /**
   * Compara esta direccion con otra y determina si se refieren a la misma
   * posicion geografica, i.e.: 'callao y corrientes' es lo mismo que
   * 'corrientes y callao'
   * @param {usig.Direccion} Direccion a comparar
   * @return {Boolean} Verdadero si hacen referencia al mismo lugar
   */
  static isEqual(dir1, dir) {
    return (dir.tipo === "DIRECCION" && dir1.tipo === "DIRECCION" && (dir1.tipoDireccion === dir.tipoDireccion) &&
      ((dir1.tipoDireccion=== DIRECCION_CALLE_ALTURA &&
        dir1.calle.codigo === dir.calle.codigo &&
        dir1.altura === dir.altura) ||
        (dir1.tipoDireccion === DIRECCION_CALLE_Y_CALLE &&
          ((dir1.calle.codigo === dir.calle.codigo && dir1.calleCruce.codigo === dir.calleCruce.codigo) ||
          (dir1.calle.codigo === dir.calleCruce.codigo) && dir1.calleCruce.codigo === dir.calle.codigo))
      )
    );
  };

  static fromObj(obj) {
    obj.nombre = obj.nombre_calle ? obj.nombre_calle : obj.nombre;
    let dir = null;
    if (obj.tipo !== undefined && obj.calle && obj.calle.codigo) {
      dir = this.construirDireccion(obj.calle,
        (obj.tipo === DIRECCION_CALLE_ALTURA) ? obj.altura : obj.calle_cruce);
    } else {
      let calle = obj;
      calle.codigo = calle.cod_calle;
      calle.nombre = calle.nombre_calle;
      if (obj.cod_calle2 || obj.cod_calle_cruce) {
        // Direccion Calle y Calle
        let calle_cruce = {
          codigo: obj.cod_calle2 || obj.cod_calle_cruce,
          nombre: obj.calle2 || obj.nombre_calle_cruce,
          partido: obj.nombre_partido,
          localidad: obj.nombre_localidad,
          tipo: "CALLE"
        };
        dir = Direccion.construirDireccion(calle, calle_cruce);
      } else {
        // Direccion Calle Altura
        dir = Direccion.construirDireccion(calle, obj.altura);
      }
      if (obj.nombre_partido)	{
        dir.descripcion = obj.nombre_localidad + ', ' +obj.nombre_partido
      }
    }
    if (obj.smp !== undefined && obj.smp !== null) {
      dir.smp(obj.smp);
    }
    if (obj.coordenadas !== undefined && obj.coordenadas !== null) {
      if (typeof(obj.coordenadas) === 'string') {
        dir.coordenadas = fromWkt(obj.coordenadas);
      } else {
        dir.coordenadas = obj.coordenadas;
      }
    }
    return dir;
  }
}

const fromWkt = function(wkt) {
  /*	wkt = wkt.replace('POINT (', '').replace(')', '');
   var splited = wkt.split(' ');
   return new usig.Punto(splited[0], splited[1]);*/
  const regExpPunto = /^POINT *\((-?[0-9]+\.[0-9]+) (-?[0-9]+\.[0-9]+)\)$/;
  let res = null;
  const resMatch = wkt.match(regExpPunto);
  if (resMatch){
    res = {x: resMatch[1], y: resMatch[2]};
  }
  return res;
};
